{"/ColorParser/installation":{"title":"Installation","data":{"adding-dependency#Adding Dependency":"In order to use ColorParser you will need to download it using a BuildTool like Maven or Gradle.","add-repository#Add Repository":"repositories {\r\n    maven(\"https://jitpack.io\")\r\n}","add-dependency#Add Dependency":"dependencies {\r\n    implementation(\"com.github.milkdrinkers:colorparser:VERSION\")\r\n}","shade-dependency#Shade Dependency":"plugins {\r\n    id(\"com.github.johnrengelman.shadow\") version \"8.1.1\"\r\n}\r\n\r\ntasks {\r\n    shadowJar {\r\n        relocate(\"com.github.milkdrinkers.colorparser\", \"yourpackage.yourname.colorparser\")\r\n    }\r\n}","add-repository-1#Add Repository":"repositories {\r\n    maven { url 'https://jitpack.io' }\r\n}","add-dependency-1#Add Dependency":"dependencies {\r\n    implementation 'com.github.milkdrinkers:colorparser:VERSION'\r\n}","shade-dependency-1#Shade Dependency":"plugins {\r\n    id 'com.github.johnrengelman.shadow' version '8.1.1'\r\n}\r\n\r\ntasks {\r\n    shadowJar {\r\n        relocate 'com.github.milkdrinkers.colorparser', 'yourpackage.yourname.colorparser'\r\n    }\r\n}","add-repository-2#Add Repository":"<repositories>\r\n    <repository>\r\n        <id>jitpack.io</id>\r\n        <url>https://jitpack.io</url>\r\n    </repository>\r\n</repositories>","add-dependency-2#Add Dependency":"<dependency>\r\n    <groupId>com.github.milkdrinkers</groupId>\r\n    <artifactId>colorparser</artifactId>\r\n    <version>VERSION</version>\r\n</dependency>","shade-dependency-2#Shade Dependency":"<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-shade-plugin</artifactId>\r\n    <version>3.5.0</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>package</phase>\r\n            <goals>\r\n                <goal>shade</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <configuration>\r\n        <createDependencyReducedPom>false</createDependencyReducedPom>\r\n        <relocations>\r\n            <relocation>\r\n                <pattern>com.github.milkdrinkers.colorparser</pattern>\r\n                <shadedPattern>yourpackage.yourname.colorparser</shadedPattern>\r\n            </relocation>\r\n        </relocations>\r\n    </configuration>\r\n</plugin>","platforms-other-than-papermc#Platforms Other Than PaperMC":"If using Spigot (or any other platform that doesn't natively ship Adventure), then you will need to add Adventure as a dependency in your project.Check supported platforms here. And versions here.","add-dependency-3#Add Dependency":"dependencies {\r\n    implementation(\"net.kyori:adventure-api:VERSION\")\r\n    implementation(\"net.kyori:adventure-text-minimessage:VERSION\")\r\n}","add-dependency-4#Add Dependency":"dependencies {\r\n    implementation \"net.kyori:adventure-api:VERSION\"\r\n    implementation \"net.kyori:adventure-text-minimessage:VERSION\"\r\n}","add-dependency-5#Add Dependency":"<dependency>\r\n    <groupId>net.kyori</groupId>\r\n    <artifactId>adventure-api</artifactId>\r\n    <version>VERSION</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.kyori</groupId>\r\n    <artifactId>adventure-text-minimessage</artifactId>\r\n    <version>VERSION</version>\r\n</dependency>"}},"/ColorParser/introduction":{"title":"Introduction","data":{"":"ColorParser is a simple utility for easily adding MiniMessage support with Adventure on Spigot and Paper servers. The library is maintained with three goals in mind: stability, performance and utility.","links#Links":"GitHub Repository\nJavaDoc\nMiniMessage Formatting\nMiniMessage Previewer\nAdventure Documentation"}},"/ColorParser/usage":{"title":"Basic Usage","data":{"":"Don't forget to check out the MiniMessage Documentation so you can style messages to their full potential!","simple-example#Simple Example":"A ColorParser is always instantiated with the ColorParser#of(String str) method. The string is only serialized into a Component when ColorParser#build() is executed (Which returns the Component).\nThis is the simplest example of serializing a MiniMessage string into a Component.\nColorParser.of(\"<green>Teleported to you.\").build();","methods#Methods":"","parseminimessageplaceholder#parseMinimessagePlaceholder":"The parseMinimessagePlaceholder() method allows you to dynamically replace custom tags with a String or any ComponentLike value.\nplayer.sendMessage(\n    ColorParser.of(\"<green><player> Teleported to you.\")\n        .parseMinimessagePlaceholder(\"player\", player.getName()) // Replace <player> with the players username\n        .build();\n);","parselegacy#parseLegacy":"The parseLegacy() method replaces all old color & style tags with their MiniMessage equivalents.\nplayer.sendMessage(\n    ColorParser.of(\"&6So<green>me ยง5String &4Here\")\n        .parseLegacy() // You only need to run this once to replace all legacy formatting codes\n        .build();\n);","parsepapiplaceholders#parsePAPIPlaceholders":"If PAPI isn't installed on the server this method does nothing.\nYou can use this method to parse PlaceholderAPI placeholders.\nComponent message = ColorParser.of(\"Your Displayname is: %player_displayname%\")\n    .parsePAPIPlaceholders(player)\n    .build();\nplayer.sendMessage(message);","examples#Examples":"Custom message color and hover message.\nplayer.sendMessage(\n    ColorParser.of(\"<#00ff00><hover:show_text:'<red>test'>R G B!\")\n        .build();\n);\nAdd as many placeholders as you'd like, and have backwards compatibility!\nplayer.sendMessage(\n    ColorParser.of(\"<green><player1> Teleported &6to <player2>.\")\n        .parseMinimessagePlaceholder(\"player1\", player.getName())\n        .parseMinimessagePlaceholder(\"player2\", otherPlayer.getName())\n        .parseLegacy()\n        .build();\n);\nplayer.sendMessage(\n    ColorParser.of(\"Your Displayname is: %player_displayname%\")\n        .parsePAPIPlaceholders(player)\n        .build();\n);"}},"/Crate/advanced":{"title":"Advanced Usage","data":{"":"For simplicity this page will be using the FileType Yaml. All file formats have full parity so whichever you use is up to you.","optimized-settingremoving#Optimized Setting/Removing":"Crate is designed to provide the best performance possible. In normal use-cases, it can reach up to 3x the speed of the Bukkit/Bungee API.The library also provides some methods to further increase performance if needed.","undefined#Mass Setting Values":"Consider the following code:\nconfig.set(\"Key-1\", \"Value-1\");\nconfig.set(\"Key-2\", \"Value-2\");\nconfig.set(\"Key-3\", \"Value-3\");\nThis is bad for performance since the file will be written to three times.\nInstead, one could do this:\nconfig.getFileData().insert(\"Key-1\", \"Value-1\");\nconfig.getFileData().insert(\"Key-2\", \"Value-2\");\nconfig.set(\"Key-3\", \"Value-3\");\nThis is good for performance since the file will only be written to once.","undefined#Mass Removing Values":"Consider the following code:\nconfig.remove(\"Key-1\");\nconfig.remove(\"Key-2\");\nconfig.remove(\"Key-3\");\nThis is bad for performance since the file will be written to three times.\nInstead, one could do this:\nconfig.removeAll(\"Key-1\", \"Key-2\", \"Key-3\");\nThis is good for performance since the file will only be written to once.","serializingdeserializing-objects-intofrom-files#Serializing/Deserializing Objects Into/From Files":"The serialization-system in Crate is designed to be as simple & intuitive as possible. It is also easy to port to different API's because the classes that should be serialized don't need to extend any interfaces. This makes it possible to serialize classes that you don't have access to.","register-serializable#Register Serializable":"In this example we have a class named PlayerData which gets serialized into this Json.\n{\n    \"dc2d9d9a-fc16-4045-81f6-b988b0c93978\": {\n        \"location\": {},\n        \"firstjoin\": \"2023-06-13\",\n        \"lastjoin\": \"2023-06-13\"\n    }\n}\nYou can register classes as serializable using CrateSerializer.\nCrateSerializer.registerSerializable(new CrateSerializable<PlayerData>() {\n    /**\n     * Deserialize player data into object\n     * */\n    @Override\n    public PlayerData deserialize(@NotNull Object uncastData, String key) throws ClassCastException {\n        var data = ((Map<String, Object>) uncastData);\n        Player p = Bukkit.getPlayer(UUID.fromString(key));\n        final String firstJoin = (String) data.getOrDefault(\"firstjoin\", LocalDate.now().toString());\n        final String lastJoin = (String) data.getOrDefault(\"lastjoin\", LocalDate.now().toString());\n        final HashMap<String, Location> locations = new HashMap<>();\n        Map<String, Object> configLocations = (Map<String, Object>) data.getOrDefault(\"location\", new HashMap<>());\n        configLocations.forEach((worldname, location) -> {\n            locations.put(worldname, Location.deserialize((Map<String, Object>) location));\n        });\n        return new PlayerData(p, firstJoin, lastJoin, locations); // Return object\n    }\n    /**\n     * Serialize player data for saving\n     * */\n    @Override\n    public Object serialize(@NonNull PlayerData playerData) throws ClassCastException {\n        Map<String, Object> data = new HashMap<>();\n        data.put(\"firstjoin\", playerData.firstJoin);\n        \n        data.put(\"lastjoin\", playerData.lastJoin);\n        Map<String, Object> locationData = new HashMap<>();\n        playerData.location.forEach((worldname, location) -> {\n            locationData.put(worldname, location.serialize());\n        });\n        data.put(\"location\", locationData);\n        return data;\n    }\n    @Override\n    public Class<PlayerData> getClazz() {\n        return PlayerData.class;\n    }\n});","serialize#Serialize":"You can serialize your object with with setSerializable:\nconfig.setSerializable(\"Key-1\", object);","deserialize#Deserialize":"You can deserialize your object with with getSerializable:\nconfig.getSerializable(\"Key-1\", PlayerModel.class);"}},"/Crate/basic_usage":{"title":"Basic Usage","data":{"":"For simplicity this page will be using the FileType Yaml. All file formats have full parity so whichever you use is up to you.","constructors#Constructors":"Valid constructors are:\nnew Yaml(FILE);\nnew Yaml(NAME, PATH);\nnew Yaml(FILETYPE); // Copy-constructor\nnew Yaml(NAME, PATH, INPUTSTREAM);","creating-files#Creating Files":"// Create files by instantiating their respective class directly\nYaml yaml = new Yaml(\"filename1\", \"Path\");\nConfig config = new Config(\"filename2\", \"Path\"); //Special version of YAML\nJson json = new Json(\"filename3\", \"Path\");\nToml toml = new Toml(\"filename4\", \"Path\");\n// Or use the builder\nYaml configUsingBuilder = CrateBuilder\n    .fromPath(\"examplefile.yml\")\n    .addInputStreamFromResource() // Optional if you want to generate a default config from file\n    .setDataType(DataType.SORTED)\n    .setReloadSetting(ReloadSetting.INTELLIGENT)\n    .setConfigSetting(ConfigSetting.PRESERVE_COMMENTS);\n    .createYaml()","getting-values#Getting Values":"Getting values from a file is vital. Crate provides a plethora of utility methods with sane defaults to help with this.\n// Basic Getters\nObject anObject = config.get(\"Key\"); // Default: null\nString aString = config.getString(\"Key\"); // Default: \"\"\nint anInt = config.getInt(\"Key\"); // Default: 0\ndouble aDouble = config.getDouble(\"Key\"); // Default: 0.0\nfloat aFloat = config.getFloat(\"Key\"); // Default: 0.0\nlong aLong = config.getLong(\"Key\"); // Default: 0.0\nList<String> aStringList = config.getStringList(\"Key\"); // Default: ArrayList<String>()\nTimeUnit anEnum = config.getEnum(\"Key\", TimeUnit.class); //Throws an CrateValidation / IllegalStateException\n// Advanced Getters\nOptional<String> optionalString = config.find(\"Key\", String.class); // If a key is not present an empty optional will be returned\nString getOrDefault = config.getOrDefault(\"Key\", \"Default-Value\"); // Returns the value or Default-Value if Key does not exist\nString getOrSetDefault = config.getOrSetDefault(\"Key\", \"Default-Value\"); // Will set and return value, if key does not yet exist in file","setting-values#Setting Values":"config.set(\"Key\", \"Value\");\nconfig.setDefault(\"Key\", \"Default-Value\"); // Will only set, if key does not yet exist in file","quality-of-life#Quality of Life":"","setdefault#setDefault":"Sets the value only if the file does not contain the key.\nconfig.setDefault(\"Key\", \"Default-Value\");","getordefault#getOrDefault":"Returns the value, or default-value if file does not contain the key.\nString getOrDefault = config.getOrDefault(\"Key\", \"Default-Value\");","getorsetdefault#getOrSetDefault":"Returns the value, or default-value if file does not contain the key. Also sets the value to default if the file does not contain the key.\nString getOrSetDefault = config.getOrSetDefault(\"Key\", \"Default-Value\");","setpathprefix#setPathPrefix":"Sets a prefix for the key argument.Consider the following code:\nconfig.get(\"spawn.x\");\nconfig.get(\"spawn.y\");\nconfig.get(\"spawn.z\");\nInstead, one could do this:\nconfig.setPathPrefix(\"spawn\");\nconfig.get(\"x\");\nconfig.get(\"y\");\nconfig.get(\"z\");\nconfig.setPathPrefix(\"\"); // Set prefix to empty as to not mess with other stuff accessing","io#IO":"File file = config.getFile();\nString name = config.getName();\nconfig.clear();"}},"/Crate/file_formats":{"title":"File Formats","data":{"":"Crate provides support for three file formats: Yaml, Json and Toml. Whichever one you want to use, and when, should be based on your needs & requirements.","undefined#Config":"The config format in Crate is just an extension of Yaml with specific File Settings by default.","undefined#Yaml":"Pros\nCommon for configuration\nReadability\nCons\nSlower than alternatives\nLess suitable for storing larger amounts of data\nWe recommend using Crate's Config format over Yaml for configuration files.","undefined#Json":"Pros\nCommon for configuration & storage\nIs very fast, can store larger amounts of data\nCons\nReadability","undefined#Toml":"Pros\nCompromises between Yaml's readability & Json's performance\nCons\nNot as common as Yaml & Json"}},"/Crate/installation":{"title":"Installation","data":{"adding-dependency#Adding Dependency":"In order to use Crate you will need to download it using a BuildTool like Maven or Gradle.","add-repository#Add Repository":"repositories {\r\n    maven(\"https://jitpack.io\")\r\n}","add-dependency#Add Dependency":"dependencies {\r\n    implementation(\"com.github.milkdrinkers:crate:VERSION\")\r\n}","shade-dependency#Shade Dependency":"plugins {\r\n    id(\"com.github.johnrengelman.shadow\") version \"8.1.1\"\r\n}\r\n\r\ntasks {\r\n    shadowJar {\r\n        relocate(\"com.github.milkdrinkers.Crate\", \"yourpackage.yourname.crate\")\r\n    }\r\n}","add-repository-1#Add Repository":"repositories {\r\n    maven { url 'https://jitpack.io' }\r\n}","add-dependency-1#Add Dependency":"dependencies {\r\n    implementation 'com.github.milkdrinkers:crate:VERSION'\r\n}","shade-dependency-1#Shade Dependency":"plugins {\r\n    id 'com.github.johnrengelman.shadow' version '8.1.1'\r\n}\r\n\r\ntasks {\r\n    shadowJar {\r\n        relocate 'com.github.milkdrinkers.Crate', 'yourpackage.yourname.crate'\r\n    }\r\n}","add-repository-2#Add Repository":"<repositories>\r\n    <repository>\r\n        <id>jitpack.io</id>\r\n        <url>https://jitpack.io</url>\r\n    </repository>\r\n</repositories>","add-dependency-2#Add Dependency":"<dependency>\r\n    <groupId>com.github.milkdrinkers</groupId>\r\n    <artifactId>crate</artifactId>\r\n    <version>VERSION</version>\r\n</dependency>","shade-dependency-2#Shade Dependency":"<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-shade-plugin</artifactId>\r\n    <version>3.5.0</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>package</phase>\r\n            <goals>\r\n                <goal>shade</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <configuration>\r\n        <createDependencyReducedPom>false</createDependencyReducedPom>\r\n        <relocations>\r\n            <relocation>\r\n                <pattern>com.github.milkdrinkers.Crate</pattern>\r\n                <shadedPattern>yourpackage.yourname.crate</shadedPattern>\r\n            </relocation>\r\n        </relocations>\r\n    </configuration>\r\n</plugin>","what-now#What now?":"Crate should now be available for use in your project.For further reading I strongly recommend:\nFile Formats\nBasic Usage"}},"/Crate/introduction":{"title":"Introduction","data":{"":"Crate is a file management library that allows for easy creation and use of YAML, JSON & TOML files. The library is maintained with three goals in mind: stability, performance and utility.","links#Links":"GitHub Repository\nJavadoc"}},"/Crate/settings":{"title":"File Settings","data":{"settings#Settings":"Crate File instances have multiple settings. Here they are explained in finer detail.","datatype#DataType":"","datatypeunsorted#DataType.UNSORTED":"This is the default value if ConfigSetting is SKIP_COMMENTS\nIs unsorted, using less RAM. Meaning, when writing back to the File it might mess up the arrangement and the sequence (it wont make the file unreadable, just the Style might be messed up and comments shifted around).\nThis type is best suited for read-only files or when storing data.","datatypesorted#DataType.SORTED":"This is the default value if ConfigSetting is PRESERVE_COMMENTS\nIs internally sorted, using more RAM. When writing back to the File, entry sequence is preserved.\nThis type is best suited for files that are written to by the program that also need to keep their internal structure. (Like a config file with comments.)","reloadsetting#ReloadSetting":"","reloadsettingintelligent#ReloadSetting.INTELLIGENT":"This is the default value\nThe FileData will only be reloaded when the FileContents have changed since the last access.","reloadsettingautomatic#ReloadSetting.AUTOMATIC":"The FileData will be reloaded everytime you access the File.","reloadsettingmanual#ReloadSetting.MANUAL":"The FileData will only be reloaded, when you call the forceReload() method.","configsetting#ConfigSetting":"","configsettingskip_comments#ConfigSetting.SKIP_COMMENTS":"This is the default value\nAny comments will be stripped.","configsettingpreserve_comments#ConfigSetting.PRESERVE_COMMENTS":"Any comments will be preserved."}},"/about":{"title":"About","data":{"":"Milkdrinkers was made by a guy who likes milk. He also codes sometimes."}},"/":{"title":"Introduction","data":{"":"Welcome to the Milkdrinkers Documentation! We use this site to document our project in the hopes that other users will find them usefull."}}}